# 1 CPU
程序：指示计算机每一步动作的一组指令。
程序的组成：指令和数据。例如，C语言“printf ("你好"); ”这个简单的程序中，printf是指令，"你好"是数据。
机器语言：CPU可以直接识别并使用的语言。
正在运行的程序存储在内存中，硬盘和磁盘等媒介上保存的程序被复制到内存后才能运行。
内存地址：内存中，用来表示命令和数据存储位置的整数值。
计算机的构成元件中，负责程序的解释和运行，并控制整个计算机的设备的是CPU。
程序运行流程：高级语言经过编译生成由机器语言组成的EXE文件，程序运行时在内存中生成EXE文件的脚本，CPU解释并执行程序内容。如下图所示。

集成电路IC（Integrated Circuit）：CPU和内存都是IC，IC都是由许多晶体管组成的电子部件。
CPU内部由寄存器、控制器、运算器和时钟四个部分构成。各部分之间由电流信号相互连通。如下图所示：

● 寄存器可用来暂存指令、数据等处理对象，可以将其看作是内存的一种。根据种类的不同，一个CPU内部会有20～100个寄存器。
● 控制器负责把内存上的指令、数据等读入寄存器，并根据指令的执行结果来控制整个计算机。
● 运算器负责运算从内存读入寄存器的数据。
● 时钟负责发出CPU开始计时的时钟信号。不过，也有些计算机的时钟位于CPU的外部。
内存指计算机的主存储器（main memory），简称主存。主存通过控制芯片等与CPU相连，主要负责存储指令和数据。主存由可读写的元素构成，每个字节（1字节=8位）都带有一个地址编号。CPU可以通过该地址读取主存中的指令和数据，也可以写入数据，主存中存储的指令和数据会随着计算机的关机而自动清除。程序启动后，根据时钟信号，控制器会从内存中读取指令和数据。通过对这些指令加以解释和运行，运算器就会对数据进行运算，控制器根据该运算结果来控制计算机。
控制就是指数据运算以外的处理（主要是数据输入输出的时机控制）。比如内存和磁盘等媒介的输入输出、键盘和鼠标的输入、显示器和打印机的输出等，这些都是控制的内容。
程序计数器、累加寄存器、标志寄存器、指令寄存器和栈寄存器都只有一个，其他的寄存器一般有多个。
程序计数器确保程序按流程执行：首先用户发出启动程序的指令后，Windows等操作系统把硬盘中保存的程序复制到内存中，然后程序开始运行，CPU每执行一个指令，程序计数器的值都加1，然后CPU的控制器参照程序计数器的数值，从内存中读取命令并执行。程序的流程分为顺序执行、条件分支和循环三种：顺序执行是指按照地址内容的顺序执行指令；条件分支是指根据条件执行任意地址的指令；循环是指重复执行同一地址的指令。函数的调用处理也是通过把程序计数器的值设定成函数的存储地址来实现的。
CPU的处理其实很简单，下表列出了CPU能只能够的机器语言指令：（外围设备指的是连接到计算机的键盘、鼠标、显示器、设备装置、打印机等。）


2 数据是用二进制表示的
在高级语言编写的程序中，数值、字符串和图像等信息在计算机内部都是以二进制数值的形式表示的。因为计算机内部是由IC这种电子部件构成的，IC的结构特征是其引脚只有直流电压0V或5V两种状态，因此决定了计算机的信息数据只能用二进制数来处理。
二进制数的位数一般是8位、16位、32位等8的倍数，8位(bit，binary digit)二进制数称为一个字节(byte)，位是最小单位，字节是基本单位。内存和磁盘都使用字节单位来存储和读写数据。
3 计算机运算小数时出错的原因
连贯的二进制数表示的十进制数是非连贯的，如下图所示，所以其余十进制数就无法用二进制数准确表示，会变成01的循环。

为了避免计算小数时出错，可以将小数转换为整数计算，再将计算结果由整数转换为小数，计算机在进行整数计算时一定不会出错。
4 有棱有角的内存
有棱有角的内存是指内存从物理上看是有棱有角的。内存实际上是一种名为内存IC的电子元件，内存IC中有电源、地址信号、数据信号、控制信号等用于输入输出的大量引脚，通过为其指定地址来进行数据的读写。程序员只需要把内存IC想象成每层都存储数据的楼房，无需过多关注电源和控制信号，如下图所示是1KB的内存模型。

高级编程语言中的数据类型表示占据内存区域的大小和存储在该内存区域的数据类型，从内存来看，就是占用的内存大小（占有的楼层数）。通过使用变量，无需程序员指定物理地址，也可以对内存进行读写，因为在程序运行时，Windows等操作系统会自动决定变量的物理地址。

指针是一种变量，它表示的不是数据的值，而是存储数据的内存的地址。指针的数据类型表示一次可以读写的内存长度，如下图所示。

数组是内存的使用方法的基础，因为数组和内存的物理构造是一样的。数组是指多个同样数据类型的数据在内存中连续排列的形式，通过给数组中的数据编号来进行区分，编号称为索引，指定索引就可以对该索引对应地址的内存进行读写操作，索引和内存地址的变换工作是由编译器自动实现的。数组的定义中指定的数据类型也表示一次能够读写的内存大小，如char类型的数组以1个字节为单位进行内存读写，short以2个字节、long以4个字节。
栈和队列可以不通过指定地址和索引来对数组元素进行读写，栈仍以普通的数组形式存储，队列通常以环状缓冲区的形式存储。
链表和二叉树也都是不用考虑索引顺序就可以对数组元素进行读写的方式，链表可以高效地对数组数据进行追加和删除处理，二叉查找树可以更加高效地对数据进行检索。
5 内存和磁盘的亲密关系
磁盘与内存的功能都是用于存储程序命令和数据，不过内存是利用电流来实现存储，磁盘是利用磁效应来实现存储，内存的高速高价，磁盘是低速廉价。
磁盘中存储的程序必须加载到内存后才能运行，因为负责解析和运行程序内容的CPU需要通过内部程序计数器来指定内存才能读出程序。

通过使用内存来提高磁盘访问速度的机制称为磁盘缓存（Disk Cache），将从磁盘中读出的数据存储到内存中，以后读取同一数据时，就不需要通过实际的磁盘，而是从磁盘缓存中读取。把低速设备的数据保存在高速设备中，需要时直接从高速设备中读取，这种缓存方式在Web浏览器中也会用到，通常将远程服务器获取的数据暂时保存在磁盘中，以后再使用就可以直接从磁盘中读取，也就实现了把低速的网络数据保存到相对高速的磁盘中。
把磁盘的一部分作为假想内存来使用的机制称为虚拟内存（virtual memory）。为了实现虚拟内存，就必须把实际内存（也称为物理内存）的内容，和磁盘上的虚拟内存的内容进行部分置换并同时运行程序。虚拟内存的方法有分页式和分段式两种，Windows采用分页式，该方式是指在不考虑程序构造的情况下，把运行的程序按照一定大小的页（page）进行分割，并以页为单位在内存和磁盘间进行置换（需要运行的部分page in，不需要运行的部分page out）。
磁盘缓存实际上是内存，虚拟内存实际上是磁盘。

Windows系统存在运行时内存不足的问题，为了解决内存不足的问题，需要增加内存容量或者把运行的应用文件变小。把运行的应用文件变小有两种方法：
1. 通过DLL文件实现函数共有
DLL（dynamic link library）文件是在程序运行时可以动态加载library（函数和数据的集合）的文件。多个应用可以共有一个DLL文件，通过共有同一个DLL文件就可以达到节约内存的效果。
2. 通过调用_stdcall来减小程序文件的大小
调用_stdcall是C语言编写应用时，在调用函数后，把不需要的数据从接收和传递函数的参数时使用的内存上的栈区域中清理出去。清理执行栈不是程序本身写的，而是由编译器自动附加到函数调用方的。

磁盘的划分方式有扇区方式和可变长方式两种，前者空间长度固定，后者空间长度可变。一般Windows计算机的硬盘和软盘都采用扇区方式，把磁盘物理表面划分为若干个同心圆的空间就是磁道，把磁道按照固定大小（能存储的数据长度相同）划分的空间就是扇区。Windows计算机中，一般磁盘的1个扇区是512个字节。Windows在逻辑/软件方面对磁盘进行读写的单位是扇区整数倍簇，1簇=1扇区(512byte)/2扇区(1KB).../64扇区(32KB)。硬盘和软盘的不同文件不能存储在同一个簇中，否则会导致只有一方的文件不能被删除，因此不管多么小的文件，都会占用1簇的空间，所有文件都会占用1簇的整数倍的磁盘空间。

6 程序运行环境
应用的运行环境是指操作系统和计算机本身（硬件：CPU、内存、硬盘、显示器、驱动器、键盘、打印机等）的种类。CPU只能解释其自身固有的机器语言，不同的CPU能解释的机器语言种类是不同的。机器语言的程序称为本地代码，高级编程语言编写的代码称为源代码，以文本文件的形式，通过对源代码进行编译可以得到本地代码。
同一类型的硬件可以选择安装多种操作系统。应用软件需要根据不同的操作系统类型来专门开发，操作系统不同，应用程序向操作系统传递指令的途径（即API）也不同，若将应用程序移植到其他操作系统就需要重写应用中的API。虚拟机和Java虚拟机可以提供不依赖于特定硬件和操作系统的程序运行环境。
7 从源文件到可执行文件
扩展名为.obj的目标文件的内容是本地代码。
将多个目标文件结合生成EXE文件的工具称为链接器。
把多个目标文件收录在一起的文件称为库文件（后缀.lib）。链接器会从库文件中抽取出必要的目标文件并将其结合到EXE文件中。库文件的作用是简化链接器参数指定多个目标文件这一过程，如在链接调用了数百个标准函数的程序时，只需指定几个库文件就可以了。
另外还存在一种程序运行时结合的DLL形式的库文件。Windows以函数的形式为应用提供各种功能，这些形式的函数称为API，API的目标文件不存储在通常的库文件中，而是存储在名为DLL文件的特殊库文件中。仅包含Windows的DLL文件中存储的函数信息的文件称为导入库。把导入库信息结合到EXE文件中，程序在运行时就可以利用DLL内的函数了。存储目标文件实体，并直接和EXE文件结合的库文件称为静态链接库。Windows的编译和链接机制如下图所示：


源文件（源代码）经过编译器编译转换成可执行/本地/目标文件（本地代码，.obj文件不能直接运行，还需链接多个.obj文件生成1个EXE文件才能运行），可执行文件（EXE文件）单独存储在硬盘中，通过资源管理器找到并双击EXE文件把它加载到内存中运行，EXE文件中给变量和函数分配了虚拟的内存地址，在程序运行时虚拟内存地址会转换成实际的内存地址，这个过程中，链接器会在EXE文件的开头，追加转换内存地址所需的必要信息，这个信息称为再配置信息，因此可以认为EXE文件的内容分为再配置信息、变量组和函数组，当程序加载到内存后，还会生成栈和堆两个组，栈用于存储函数内部临时使用的变量（局部变量）以及函数调用时所用的参数的内存区域，堆用于存储程序运行时任意数据和对象的内存区域。加载到内存的程序组成如下图所示：

注意区分加载到内存前后的程序组成，加载前的程序就是EXE文件，包含变量组、函数组和再配置信息组，加载后的程序包含EXE文件中的变量和函数，以及堆内存、栈内存四部分。
栈和堆的相同点在于都是在程序运行时分配的内存，不同点在于内存的使用方法，栈由编译器自动对数据进行存储和清理，在函数被调用时分配内存空间，函数处理完后自动释放，无需程序员参与。堆需要程序员编写程序进行申请分配或释放，若不释放堆内存就会导致内存空间一直被占用，造成内存泄露。

编译器和解释器：编译器用于在运行前对所有源代码进行解释处理，解释器用于在运行时对源代码的内容逐行进行解释处理。
分割编译是指将整个程序分为多个源代码来编写，然后分别进行编译，最后链接成一个EXE文件，这样每个源代码相对较短，便于程序管理。
根据开发工具种类的不同，编译器可以通过选择Build菜单来生成EXE文件，Build是指连续执行编译和链接。
使用DLL文件的好处是：DLL文件中的函数可以被多个程序共用，因此可以节约内存和磁盘，并且在对函数内容进行修正时，不需要重新链接使用这个函数的程序。
8 操作系统和应用的关系
调用操作系统功能称为系统调用（system call），应用通过系统调用间接控制硬件。
网络和数据库被称为中间件而不是应用，处于 操作系统和应用中间，统称为系统软件。
设备驱动也是操作系统的一部分，新的设备（如键盘、鼠标、显示器 、磁盘装置等）连接到计算机后，系统就会自动安装和设定用来控制该设备的设备驱动程序。
程序是操作系统、中间件、应用等所有软件的统称，程序员制作的都是应用而不是操作系统。
9 通过汇编语言认识程序实际构成
汇编语言利用助记符来记述程序功能。
汇编语言的源代码通过汇编器工具根据转换成本地代码的方式称为汇编。本地代码转换成汇编语言的源代码的方式称为反汇编。
汇编语言源文件的扩展名为.asm，是assembler（汇编器）的缩写。
汇编语言程序中的段定义指的是构成程序的命令和数据的集合组，在高级编程语言的源代码中，即使指令和数据在编写时是分散的，编译后也会在段定义中集合汇总起来。
汇编语言的跳转指令用于将程序流程跳转到其他地址，通过跳转指令，可以实现循环和条件分支。
10 硬件控制方法
用于识别外围设备的编号称为I/O地址或I/O编号，所有连接到计算机的外围设备都会分配一个I/O地址编号。

如上图所示，在汇编语言中，计算机主机通过IN和OUT指令与外围设备进行输入输出操作，这些指令也是汇编语言的助记符，IN指令通过指定端口号的端口输入数据，并将其存储在CPU内部的寄存器中；OUT指令把CPU寄存器中存储的数据输出到指定端口号的端口。
计算机主机中含有连接外围设备的连接器，由于电压不同，数字信号和模拟信号的电流特性也不同，计算机主机与外围设备无法直接连接，因此，连接器内部都有用于交换电流的IC，统称为I/O控制器，I/O控制器中有用于临时保存输入输出数据的内存，这个内存就是端口。计算机连接多个外围设备，就会有多个I/O控制器即多个端口，一个I/O控制器可以控制一个或多个外围设备，各端口之间通过端口号区分，端口号也称为I/O地址。

IRQ是用于执行硬件中断请求的编号，实现暂停当前正在运行的程序，并跳转到其他程序运行。
DMA指的是不经过CPU中介处理，外围设备直接与计算机的主内存进行数据传输，磁盘等用于处理大量数据的外围设备都具有DMA功能，利用DMA，大量数据可以在短时间内转送到主内存。
显示器中显示的信息一直存储在VRAM内存中，往VRAM中写入的数据都会在显示器中显示出来。
